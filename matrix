#!/bin/bash

dims()
{
	# Check for correct numbers of args, expected: 1
	if [ "$#" -gt 1 ]; then
		_RET=2; return 2
	fi

	# assign M to the path of a temp file and cat positional parameter 1
	# into temp file
	M=".dimsTmp$$"
	cat $1 > $M

	# pipe wc -w into cut and get the first field
	WORDS=$(wc -w $M | cut -d " " -f 1)
	# pipe wc -l into cut and get the first field
	LINES=$(wc -l $M | cut -d " " -f 1)
	# the number of columns is the totals "words"/lines
	COLS=$(( $WORDS / $LINES ))

	# send formatted result to stdout
	echo "$LINES $COLS"
	rm .dims*

	_RET=0
	return 0

}

transpose()
{
	# Check for correct numbers of args, expected: 1
	if [ "$#" -gt 1 ]; then
		_RET=2; return 2
	fi

	# assign M to the path of a temp file and redirect cat's stdout into temp file
	M=".transTmp$$"
	cat $1 > $M

	# The cols in M is the second field returned by the dims func.
	COLS=$( dims $M | cut -d " " -f 2 )

	# cut each column from M and paste in serial to stdout
	for ((i=1; i<=$COLS; i++)); do
		cut -d "	" -f "$i" $M | paste -s
	done

	rm .trans*

	_RET=0
	return 0
}

mean()
{
	# Check for correct numbers of args, expected: 1
	if [ "$#" -gt 1 ]; then
		_RET=2; return 2
	fi

	# assign M to the path of a temp file and redirect cat's stdout into temp file
	M=".meanTmp$$"
	cat $1 > $M
	COLS=$( dims $M | cut -d " " -f 2 )
	LINES=$(wc -l $M | cut -d " " -f 1)

	# for each column in M iterate through the numbers and sum them
	for ((i=1; i<=$COLS; i++)); do
		col=$(cut -f "$i" $M)
		sum=0

		for j in $col; do
			sum=$(( $sum + $j ))
		done

		# print the mean of each column, putting a tab char after each mean except
		# for the last one.
		if [ $i -eq $COLS ]; then
			mean=$(( ( $sum + ($LINES/2)*( ($sum>0)*2-1 ) ) / $LINES ))
			printf "%d" $mean
		else
			mean=$(( ( $sum + ($LINES/2)*( ($sum>0)*2-1 ) ) / $LINES ))
			printf "%d\t" $mean
		fi
	done

	printf "\n"
	rm .mean*
}

add()
{
	if [ "$#" -lt 2 ] || [ "$#" -gt 2 ]; then
		_RET=2; return 2
	fi

	# use dims function to get dimensions of each matrix file
	M1_DIMS=$( dims $1 )
	M2_DIMS=$( dims $2 )

	# Only proceed if the dimensions match
	if [ "$M1_DIMS" = "$M2_DIMS" ]; then
		# get number of cols
		COLS=$( echo $M1_DIMS | cut -d " " -f 2 )

		# redirect the files in pos. params. 1 and 2 to fd's 3 and 4.
		# Read in from both fd's and save the line in array var currLine{1,2}
		while read -a currLine1 <&3 && read -a currLine2 <&4; do

			# sum the corresponding arrays, cell by cell, and send to stdout
			for ((i=0; i<$(( $COLS -1 )); i++)); do
				printf "%d\t" "$(( ${currLine1[i]} + ${currLine2[i]} ))"
			done
				printf "%d\n" "$(( ${currLine1[i]} + ${currLine2[i]} ))"

		done 3<"$1" 4<"$2" # feed the while loop with fd's 3 and 4

	else
		_RET=3; return 3
	fi
}


multiply()
{
	if [ "$#" -lt 2 ] || [ "$#" -gt 2 ]; then
		_RET=2; return 2
	fi

	# declare 3 arrays to hold data from input matrices and the resultant product matrix
	declare -a M1
	declare -a M2
	declare -a M3

	# get and store the dimensions of both input matrices
	M1_DIMS=$( dims $1 )
	M1_COLS=$( echo $M1_DIMS | cut -d " " -f 2 )
	M1_ROWS=$( echo $M1_DIMS | cut -d " " -f 1 )

	M2_DIMS=$( dims $2 )
	M2_ROWS=$( echo $M2_DIMS | cut -d " " -f 1 )
	M2_COLS=$( echo $M2_DIMS | cut -d " " -f 2 )

	# store the dimensions of the resultant product matrix
	M3_ROWS="$M1_ROWS"
	M3_COLS="$M2_COLS"

	# proceed if the matrices can be legally multiplied
	if [ "$M1_COLS" = "$M2_ROWS" ]; then

		# store each matrix in an array, number by number
		while read ROW; do
			for NUM in $ROW; do
				M1+=($NUM)
			done
		done <$1

		while read ROW; do
			for NUM in $ROW; do
				M2+=($NUM)
			done
		done <$2


		# iterate through the rows and columns the product matrix, then iterate
		# through each number in the first matrix row
		for ((i=1; i<=$M3_ROWS; i++)); do
			for ((j=1; j<=$M3_COLS; j++)); do
				total=0
				for ((k=1; k<=$M1_COLS; k++)); do
	    		ROWa="$i"
	    		COLa="$k"
	    		indexa=$(((ROWa-1)*M1_COLS+COLa-1))
	    		ROWb="$k"
	    		COLb="$j"
	    		indexb=$(((ROWb-1)*M2_COLS+COLb-1))

					# get the number from M1 and M2
	    		num_from_M1=${M1[$indexa]}
	    		num_from_M2=${M2[$indexb]}

					# calculate subtotal by multiplying the number from M1 and M2
	    		subtotal=$((num_from_M1*num_from_M2))
					# update total amount
	    		total=$(( total + subtotal ))
				done
				# at this point the calculations for a number in the product matrix is complete.
				number="$total"
				idx=$(((i-1)*M3_COLS+j))
				M3[$idx]="$number"
    	done
		done

		# print M3, the product matrix
		IDX=1
		for NUM in ${M3[@]}; do
			if [ $(( $IDX % $M3_COLS  )) -eq 0 ]; then
				printf "%s\n" "$NUM"
			elif [ $NUM -eq $M3_COLS ]; then
				printf "%s" "$NUM"
			else
				printf "%s\t" "$NUM"
			fi
			IDX=$(($IDX+1))
		done

	else
		_RET=3; return 3
	fi
}

# Beginning of script
# Check that there is at least 2 arguments passed at the command line
[ "$#" -lt  2 ] && ! [ "$0" ] && echo "Invalid number of arguments for matrix script" >&2 && exit 2

# Check that the files are valid
for i in ${@:2}
do
	if ! [ -f "$i" ] || ! [ -r "$i" ]
	then
		echo "file $i is not valid" >&2 && exit 1
	fi
done

# Return variable
declare -i _RET

# call the function matching arg 1 and pass the rest of the args to the function
$1 ${@:2}

# check return value of the last
err=$(echo $?)
if [ $err -ne 0 ]; then
	if [ $err -eq 2 ]; then
		echo "$$: Invalid number of arguments for $1 function" >&2 && exit 2
	elif [ $err -eq 3 ]; then
		echo "$$: The two matrices are not equal" >&2 && exit 3
	elif [ $err -eq 127 ]; then
		echo "$$: Bad command" >&2 && exit 4
	fi
fi
