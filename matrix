#!/bin/bash

dims()
{
	if [ "$#" -eq 0 ] || [ "$#" -gt 1 ] && [ "$1" ]; then
		_RET=2; return 2
	fi

	M=".dimsTmp$$"
	cat $1 > $M

	WORDS=$(wc -w $M | cut -d " " -f 1)
	LINES=$(wc -l $M | cut -d " " -f 1)
	COLS=$(( $WORDS / $LINES ))

	echo "$LINES $COLS"
	rm .dims*

	_RET=0
	return 0

}

transpose()
{
	if [ "$#" -eq 0 ] || [ "$#" -gt 1 ] && [ "$1" ]; then
		_RET=2; return 2
	fi

	M=".transTmp$$"
	cat $1 > $M

	COLS=$( dims $M | cut -d " " -f 2 )


	for ((i=1; i<=$COLS; i++)); do
		cut -d "	" -f "$i" $M | paste -s
	done

	rm .trans*

	_RET=0
	return 0
}

mean()
{
	if [ "$#" -eq 0 ] || [ "$#" -gt 1 ] && [ "$1" ]; then
		_RET=2; return 2
	fi

	M=".meanTmp$$"
	cat $1 > $M
	COLS=$( dims $M | cut -d " " -f 2 )
	LINES=$(wc -l $M | cut -d " " -f 1)

	for ((i=1; i<=$COLS; i++)); do
		col=$(cut -f "$i" $M)
		sum=0

		for j in $col; do
			sum=$(( $sum + $j ))
		done

		if [ $i -eq $COLS ]; then
			mean=$(( ( $sum + ($LINES/2)*( ($sum>0)*2-1 ) ) / $LINES ))
			printf "%d" $mean
		else
			mean=$(( ( $sum + ($LINES/2)*( ($sum>0)*2-1 ) ) / $LINES ))
			printf "%d\t" $mean
		fi
	done

	printf "\n"
	rm .mean*
}

add()
{
	if [ "$#" -lt 2 ] || [ "$#" -gt 2 ]; then
		_RET=2; return 2
	fi

	M1_DIMS=$( dims $1 )
	M2_DIMS=$( dims $2 )

	if [ "$M1_DIMS" = "$M2_DIMS" ]; then
		COLS=$( echo $M1_DIMS | cut -d " " -f 2 )

		while read -a currLine1 <&3 && read -a currLine2 <&4; do

			for ((i=0; i<$(( $COLS -1 )); i++)); do
				printf "%d\t" "$(( ${currLine1[i]} + ${currLine2[i]} ))"
			done
				printf "%d\n" "$(( ${currLine1[i]} + ${currLine2[i]} ))"

		done 3<"$1" 4<"$2"

	else
		_RET=3; return 3
	fi
}

multiply()
{
	if [ "$#" -lt 2 ] || [ "$#" -gt 2 ]; then
		_RET=2; return 2
	fi

	M1=( )
	M2=( )
	M3=( )

	M1_DIMS=$( dims $1 )
	M1_COLS=$( echo $M1_DIMS | cut -d " " -f 2 )
	M1_ROWS=$( echo $M1_DIMS | cut -d " " -f 1 )

	M2_DIMS=$( dims $2 )
	M2_ROWS=$( echo $M2_DIMS | cut -d " " -f 1 )
	M2_COLS=$( echo $M2_DIMS | cut -d " " -f 2 )

	M3_ROWS="$M1_ROWS"
	M3_COLS="$M2_COLS"

	if [ "$M1_COLS" = "$M2_ROWS" ]; then
		IDX=0
		while read LINE; do
			for ((i=0; i<$M1_COLS; i++)); do
				field=$(( $i % $M1_COLS + 1 ))
				M1[$IDX]=$( echo "$LINE" | cut -f$field )
				IDX=$(( $IDX + 1 ))
			done
		done <$1

		IDX=0
		while read LINE; do
			for ((i=0; i<$M2_COLS; i++)); do
				field=$(( $i % $M2_COLS + 1 ))
				M2[$IDX]=$( echo "$LINE" | cut -f$field )
				IDX=$(( $IDX + 1 ))
			done
		done <$2

		for ((i=1; i<=$M3_ROWS; i++)); do
			for ((j=1; j<=$M3_COLS; j++)); do
				runningtotal=0
				for ((k=1; k<=$M1_COLS; k++)); do
	    		ROWa="$i"
	    		COLa="$k"
	    		indexa=$(((ROWa-1)*M1_COLS+COLa-1))
	    		ROWb="$k"
	    		COLb="$j"
	    		indexb=$(((ROWb-1)*M2_COLS+COLb-1))

	    		entry_from_1=${M1[$indexa]}
	    		entry_from_2=${M2[$indexb]}

	    		subtotal=$((entry_from_1*entry_from_2))
	    		((runningtotal+=subtotal))
				done
				number="$runningtotal"
				index=$(((i-1)*M3_COLS+j))
				M3[$index]="$number"
    	done
		done

		IDX=1
		for ((i=0; i<M3_ROWS; i++ )); do
			for ((j=0; j<M3_COLS-1; j++)); do
				printf "%s\t" "${M3[$IDX]}"
				IDX=$(( $IDX + 1 ))
			done
			printf "%s\n" "${M3[$IDX]}"
			IDX=$(( $IDX + 1 ))
		done
	else
		_RET=3; return 3
	fi
}

# Beginning of script
# Check that there is at least 2 arguments passed at the command line
[ "$#" -lt  2 ] && ! [ "$0" ] && echo "Invalid number of arguments for matrix script" >&2 && exit 2

# Check that the files are valid
for i in ${@:2}
do
	if ! [ -f "$i" ] || ! [ -r "$i" ]
	then
		echo "file $i is not valid" >&2 && exit 1
	fi
done

# Return variable
declare -i _RET

# call the function matching arg 1 and pass the rest of the args to the function
$1 ${@:2}

# check return value of the last
err=$(echo $?)
if [ $err -ne 0 ]; then
	if [ $err -eq 2 ]; then
		echo "$$: Invalid number of arguments for $1 function" >&2 && exit 2
	elif [ $err -eq 3 ]; then
		echo "$$: The two matrices are not equal" >&2 && exit 3
	elif [ $err -eq 127 ]; then
		echo "$$: Bad command" >&2 && exit 4
	fi
fi
