#!/bin/bash

sum()
{
	SUM=0
	while read myLine
	do
		echo $myLine

		for i in $myLine
		do
			echo "i: $i"
				sum=$(expr $sum + $i)
		done

	done < $1

		echo "Sum of numbers: $sum"
		return 0
}

dims()
{
	[ "$#" -ne 1 ] && return 2

	matXDim=0
	matYDim=0
	# read in the matrix file at $1 one line at a time, store each line in M1_LINE
	while read M1_LINE
	do
		# update the Y-dimension counter
		matYDim=$(expr $matYDim + 1)

		# to determine the X-dimension, only one line needs to be counted
		if [ $matYDim -eq 1 ]
		then
			for i in $M1_LINE
			do
				# update x-dimension counter for each number in M1_LINE
				matXDim=$(expr $matXDim + 1)
			done
		fi
	# redirect the first arg back into the while loop
	done < $1

	# print results to stdout
	printf "$matXDim $matYDim\n"
	return 0
}

transpose()
{
	[ "$#" -ne 1 ] && return 2

	cols=$( echo $(dims $1) | cut -d " " -f1 )

	for ((i=1; i<=$cols; i++)); do
		cut -d "	" -f "$i" $1 | paste -s
	done
}

add()
{
	[ "$#" -ne  2 ] && return 2

	M1=0
	while read M1_LINE
	do
		echo $M1_LINE
		M1=${ $M1 + $M1_LINE }
	done < $1

	echo "M1: $M1"

}

# Beginning of script
# Check that there is at least 2 arguments passed at the command line
[ "$#" -lt  2 ] && echo "Invalid number of arguments for matrix script" && exit 2

# Check that the files are valid
for i in ${@:2}
do
	if ! [ -f "$i" ]
	then
		echo "file: $i is not valid" >&2 && exit 1
	fi
done

# global return variable
_RET=0

# call the function matching arg 1 and pass the rest of the args to the function
$1 ${@:2}

# check return value of the last function
if [ $? -eq 2 ]
then
	echo "$$: Invalid number of arguments for $1 function" >&2 && exit 2
fi

# if [ -e .mat* ]
# then
# 	rm .mat*
# fi
